name: FOODGRAM-PROJECT

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort==5.0.0
        cd backend/
        pip install -r requirements.txt

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          file: backend/Dockerfile
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.BACKEND }}:latest
      - name: Push frontend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          file: frontend/Dockerfile
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.FRONTEND }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            # sudo apt update
            # sudo apt upgrade -y
            # sudo apt install python3-pip python3-venv git -y
            # sudo apt install docker-compose -y
            # sudo apt install docker.io -y
            # sudo apt install nodejs -y
            # sudo apt install npm -y
            # sudo apt install postgresql postgresql-contrib -y


            sudo docker-compose down

            sudo docker system prune
            sudo docker volume prune

            sudo docker-compose rm backend
            sudo docker-compose rm frontend
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/${{ secrets.BACKEND }}
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/${{ secrets.FRONTEND }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.BACKEND }}:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.FRONTEND }}:latest

            rm .env
            touch .env

            # echo DB_ENGINE=django.db.backends.postgresql >> .env
            # echo DB_NAME=postgres >> .env
            # echo POSTGRES_USER=postgres >> .env
            # echo POSTGRES_PASSWORD=postgres >> .env
            # echo DB_HOST=db >> .env
            # echo DB_PORT=5432 >> .env
            #echo ALLOWED_HOSTS= 84.201.165.229 >> .env
            #echo SECRET_KEY='django-insecure-@_8zpdw(j%91%u2yf076(!$i*^xei^h%%%+e2zwm8olp9fr5km' >> .env

            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env

            sudo docker-compose up -d --build

            sudo docker-compose exec -T web python manage.py makemigrations
            sudo docker-compose exec -T web python manage.py migrate
            sudo docker-compose exec -T web python manage.py collectstatic --no-input
            sudo docker-compose exec -T web python manage.py load_data
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send_message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен. Сервер доступен по адресу ${{ secrets.HOST }}
